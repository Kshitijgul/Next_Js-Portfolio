import Head from "next/head";
import { useRouter } from "next/router";
import { useState, useEffect, useRef } from "react";
import Inner from "@/components/Layout/Inner";
import Landing from "@/components/Landing";
import localFont from "next/font/local";
import styles from "@/styles/Home.module.css";
import LocomotiveScroll from "locomotive-scroll";
import Description from "../components/Description";
import Skills from "../components/Skills";
import Education from "../components/Education/Index";
import SlidingImages from "../components/SlidingImages";
import Footer from "../components/Footer/Index";

// Import custom fonts
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export default function Home() {
  const router = useRouter();
  const [pageTitle, setPageTitle] = useState("About");
  const scrollContainerRef = useRef(null); // This will hold the ref for the scroll container

  useEffect(() => {
    // Set the page title based on route
    const handleRouteChange = (url) => {
      if (url === "/contact") {
        setPageTitle("Contact");
      } else if (url === "/work") {
        setPageTitle("Work");
      } else if (url === "/") {
        setPageTitle("Home");
      } else if (url === "/about") {
        setPageTitle("About");
      }
    };

    // Handle route changes to update the page title
    router.events.on("routeChangeComplete", handleRouteChange);
    return () => {
      router.events.off("routeChangeComplete", handleRouteChange);
    };
  }, [router.events]);

  // Initialize Locomotive Scroll
  useEffect(() => {
    let locomotiveScroll;
    const initLocomotiveScroll = async () => {
      const LocomotiveScroll = (await import("locomotive-scroll")).default;
      locomotiveScroll = new LocomotiveScroll({
        el: scrollContainerRef.current,
        smooth: true,
      });
    };
  
    initLocomotiveScroll();
  
    return () => {
      if (locomotiveScroll) locomotiveScroll.destroy();
    };
  }, []);
  

  return (
    <>
      <Head>
        <title>Kshitij Guladhe | Frontend Developer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="fevicon.png" />
      </Head>

      {/* The container where Locomotive Scroll will be active */}
      <div ref={scrollContainerRef} data-scroll-container>
        <Inner pageTitle={pageTitle}>
          <Landing />
          <Description id="description" />

          <Skills></Skills>
          <Education></Education>
          <SlidingImages></SlidingImages>
          <Footer></Footer>
        </Inner>
      </div>
    </>
  );
}
